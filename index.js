//------------------------------------------------------------------------------------------------------------
//User Editable Configurable Value
//Below are four variables you can edit to easily customize the script.
const runOnlyOnce = true; // set to true to run the script one time only and then exit

const intervalDays = 30; // set the number of days between script runs if runOnlyOnce is false

const daysSinceLastActive = 90; //set this to the maximum number of days since last access that a member can have to be considered for an Enterprise seat. Seats will be given to users who have been since the las X days. 
// set the batch count to be retrieved in each batch. The default value is 5.
const batchCount = 5;

const testRun = true // if this value is set to true, the script will simulate giving seats to active members but will not actually give them seats. Set to false if you would like to actually give users enterprise seats. 


//------------------------------------------------------------------------------------------------------------
//REQUIRED authintication credentials
//These are the credentials required to authenticate with the the Trello API. 

const apiKey = 'YOURAPIKEY'; //Enter your personal API key
const apiToken = 'YOURAPITOKEN'; //Enter your personal API token that was generated by the API key above
const enterpriseId = 'YOURENTERPRISEID'; //Enter the ID of the Trello Enterprise you want to add members to.


//------------------------------------------------------------------------------------------------------------
//Below this line is the main execution code. Edits below this line are not recommended unless you are trying to adapt the core funtionality of the script.

const headers = { 'Accept': 'application/json' };
const request = require('request');
const moment = require('moment');
const process = require('process');
const fs = require('fs');
const parse = require('csv-parse');

let membersAssigned = 0;
let membersSkipped = 0;
let lastMemberIndex = 0; 

const csvHeaders = [['Member Full Name', 'Days Since Last Active', 'Last Active', 'Enterprise Seat given']];
fs.writeFileSync('member_report.csv', '');
csvHeaders.forEach((header) => {
    fs.appendFileSync('member_report.csv', header.join(', ') + '\r\n');
});

function processNextBatch() {
  let getManagedMembersUrl = `https://trellis.coffee/1/enterprises/${enterpriseId}/members?fields=idEnterprisesDeactivated,fullName,username,dateLastAccessed&associationTypes=managedFree&key=${apiKey}&token=${apiToken}&count=${batchCount}}`;
  if (membersSkipped > 0) {
    getManagedMembersUrl = getManagedMembersUrl + `&startIndex=${lastMemberIndex}`;
    membersSkipped=0;
  };
    
  request.get({
    url: getManagedMembersUrl,
    headers: headers,
    json: true
  }, (error, response, body) => {
    const membersResponse = body;
    console.log(`Pulled our batch of ${membersResponse.length} members. Starting to give them Enterprise seats now...`);
    if (!Array.isArray(membersResponse) || membersResponse.length === 0) {
      if (testRun === false) {
        console.log(`No more members to process, All done! . Enterprise seats were given to ${membersAssigned}. See member_report.csv for details on which members were given seats.`);} 
      else {console.log(`No more members to process, Test all done! Enterprise seats would have been given to ${membersAssigned} if not in test mode. See member_report.csv for details on which members would have been given enterprise seats.`)};
      return;
    }
    membersResponse.forEach((member) => {
      const daysActive = moment().diff(moment(member.dateLastAccessed), 'days');
      if (testRun === false) {
      if (daysActive <= daysSinceLastActive && !member.idEnterprisesDeactivated.length) { 
        const giveEnterpriseSeatUrl = `https://trellis.coffee/1/enterprises/${enterpriseId}/members/${member.id}/licensed?key=${apiKey}&token=${apiToken}&value=true`;
        const data = { memberId: member.id };
        request.put({
          url: giveEnterpriseSeatUrl,
          headers: headers,
          form: data
        }, (error, response, body) => {
          //console.log(body);
          //console.log(member.username);
          const licensedResponse = JSON.parse(body);
          membersAssigned += 1;
          const rowData = [[member.fullName, daysActive, member.dateLastAccessed, 'Yes']];
fs.appendFileSync('member_report.csv', rowData.join(', ') + '\r\n');
          console.log(`Gave an Enterprise Seat to member: ${member.fullName}. Have now assigned a total of ${membersAssigned} Enterprise seats.`);
      });
      } else {
        const rowData = [[member.fullName, daysActive, member.dateLastAccessed, 'No']];
fs.appendFileSync('member_report.csv', rowData.join(', ') + '\r\n');
        console.log(`${member.fullName} has not been active so we did not give them an Enterprise Seat.`);
        membersSkipped +=1;
      }}; 
    if (testRun === true) {
      if (daysActive <= daysSinceLastActive && !member.idEnterprisesDeactivated.length) { 
        const data = { memberId: member.id };
        const rowData = [[member.fullName, daysActive, member.dateLastAccessed, 'Yes']];
fs.appendFileSync('member_report.csv', rowData.join(', ') + '\r\n');
        console.log(`[TEST MODE] Gave an Enterprise Seat to member: ${member.fullName}. Have now assigned a total of ${membersAssigned} Enterprise seats.`);

      } else {
        const rowData = [[member.fullName, daysActive, member.dateLastAccessed, 'No']];
fs.appendFileSync('member_report.csv', rowData.join(', ') + '\r\n');
        console.log(`[TEST MODE] ${member.fullName} has not been active so we did not give them an Enterprise Seat.`);
        membersSkipped +=1;
      }
    }});
    lastMemberIndex += membersSkipped + 1;
    setTimeout(processNextBatch, 5000);
});
}

// run the job once if runOnlyOnce is true, otherwise schedule it to run every X days
if (runOnlyOnce) {
  console.log('Running script one time only');
  processNextBatch();

} else {
  console.log(`Running script automatically every ${intervalDays} days`);
  cron.schedule(`0 0 1 */${intervalDays} * *`, () => {
    console.log(`Running script automatically every ${intervalDays} days`);
    processNextBatch();
  });
  // run the job once on startup
  processNextBatch();
}
